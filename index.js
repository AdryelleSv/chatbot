const qrcode = require('qrcode-terminal');
const { Client, LocalAuth, MessageMedia } = require('whatsapp-web.js');

const representatives = {
    junior: '558199663039@c.us',
    walquiria: '558198492778@c.us'
};
const representativeIds = Object.values(representatives);

const client = new Client({
    authStrategy: new LocalAuth()
});

const activeChats = new Map(); // Cliente -> Representante ativo
const idleTimers = new Map(); // Gerencia timers de inatividade
const users = new Map(); // Armazena os nomes dos clientes

client.on('qr', (qr) => {
    console.log('QR Code recebido, escaneie com o WhatsApp:');
    qrcode.generate(qr, { small: true });
});

client.on('ready', () => {
    console.log('Bot est√° pronto!');
});

// Fun√ß√£o para resetar o timer de inatividade
const resetIdleTimer = (chatId) => {
    if (idleTimers.has(chatId)) clearTimeout(idleTimers.get(chatId));

    const firstTimer = setTimeout(() => {
        if (activeChats.has(chatId)) {
            client.sendMessage(chatId, 'Voc√™ est√° inativo h√° algum tempo. Deseja continuar o atendimento? Responda "Sim" em at√© 2 minutos para n√£o encerrar.');

            const secondTimer = setTimeout(() => {
                if (activeChats.has(chatId)) {
                    activeChats.delete(chatId);
                    client.sendMessage(chatId, 'Conversa encerrada por inatividade. Se precisar de ajuda, √© s√≥ me chamar! üòä');
                }
            }, 120000); // 2 minutos

            idleTimers.set(chatId, secondTimer);
        }
    }, 110000); // 1m50s

    idleTimers.set(chatId, firstTimer);
};

client.on('message', async (message) => {
    const chatId = message.from;
    resetIdleTimer(chatId);

    // Se o cliente ainda n√£o forneceu um nome, pergunta primeiro
    if (!users.has(chatId)) {
        if (message.body.trim().length < 3) {
            client.sendMessage(chatId, 'Ol√°! üòä Como gostaria de ser chamado?');
            return;
        }
        users.set(chatId, message.body.trim()); // Armazena o nome informado

        // Ap√≥s armazenar o nome, envia o menu personalizado
        client.sendMessage(chatId, `Ol√° ${message.body}, tudo bem? üòä
            \nBem-vindo(a) √† Central de Relacionamentos da Lins Fios. Escolha uma op√ß√£o:
            \n1Ô∏è‚É£ - üìñ Cat√°logo Fios
            \n2Ô∏è‚É£ - üìñ Cat√°logo Linhas
            \n3Ô∏è‚É£ - üë• Falar com um representante
            \n4Ô∏è‚É£ - üë©‚Äçüíª Financeiro / Solicita√ß√£o de Boletos
            \nPor favor, digite o n√∫mero correspondente √† sua escolha.`);
        return;
    }
    // Se um representante estiver atendendo, o chatbot apenas repassa as mensagens
    if (activeChats.has(chatId)) {
        const repId = activeChats.get(chatId);

        // Cliente mandando mensagem ‚Üí Repassa para o representante
        if (!representativeIds.includes(chatId)) {
            client.sendMessage(repId, `Cliente (${users.get(chatId)}): ${message.body}`);
        }
        // Representante mandando mensagem ‚Üí Repassa para o cliente
        else {
            const clientId = [...activeChats.entries()].find(([_, v]) => v === chatId)?.[0];
            if (clientId) {
                client.sendMessage(clientId, `Representante: ${message.body}`);
            }
        }
        return;
    }

    // Processamento do menu principal
    switch (message.body.toLowerCase()) {
        case '1':
            const fiosPdf = MessageMedia.fromFilePath('./pdfs/Catalogo_Digital_Fios.pdf');
            client.sendMessage(chatId, fiosPdf, { caption: 'üìÑ Aqui est√° o cat√°logo digital de fios.' });
            break;

        case '2':
            const linhasPdf = MessageMedia.fromFilePath('./pdfs/Catalogo_Digital_Linhas.pdf');
            client.sendMessage(chatId, linhasPdf, { caption: 'üìÑ Aqui est√° o cat√°logo digital de linhas.' });
            break;

        case '3':
            activeChats.set(chatId, representatives.junior);
            message.reply(`Voc√™ ser√° atendido pelo nosso representante. Caso prefira *Para encerrar, digite "#sair"*.`);
            client.sendMessage(representatives.junior, `Novo atendimento iniciado por ${users.get(chatId)} (${chatId}).`);
            break;

        case '4':
            message.reply(`Voc√™ pode falar com o setor financeiro diretamente pelo link:\n\nhttps://wa.me/558198492778`);
            break;

        default:
            message.reply(`Desculpe, n√£o entendi. Escolha uma das op√ß√µes abaixo:\n\n1Ô∏è‚É£ - üìñ Cat√°logo Fios\n2Ô∏è‚É£ - üìñ Cat√°logo Linhas\n3Ô∏è‚É£ - üë• Falar com um representante\n4Ô∏è‚É£ - üë©‚Äçüíª Financeiro / Solicita√ß√£o de Boletos\n\nDigite apenas o n√∫mero da op√ß√£o desejada.`);
    }
});

client.on('error', (error) => console.error('Erro detectado:', error));

client.on('disconnected', (reason) => {
    console.log(`Bot desconectado: ${reason}`);
    console.log('Tentando reiniciar...');
    client.initialize();
});

client.initialize().catch((error) => {
    console.error('Erro ao inicializar o cliente:', error);
    setTimeout(() => client.initialize(), 5000);
});
